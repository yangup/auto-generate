{
    "id": "id",
    "rawText": "rawText",
    "afterText": "afterText",
    "createTime": "createTime",
    "updateTime": "updateTime"
}


@RequestParam(name = "id", required = false) String id,
@RequestParam(name = "rawText", required = false) String rawText,
@RequestParam(name = "afterText", required = false) String afterText,
@RequestParam(name = "createTime", required = false) LocalDateTime createTime,
@RequestParam(name = "updateTime", required = false) LocalDateTime updateTime


{
    title: '主键ID',
    key: 'id',
},{
    title: '原文',
    key: 'rawText',
},{
    title: '解析后的文本',
    key: 'afterText',
},{
    title: '数据插入时间',
    key: 'createTime',
},{
    title: '最后更新时间',
    key: 'updateTime',
}


{
    title: '主键ID',
    width: 100,
    key: 'id',
},{
    title: '原文',
    width: 100,
    key: 'rawText',
},{
    title: '解析后的文本',
    width: 100,
    key: 'afterText',
},{
    title: '数据插入时间',
    width: 100,
    key: 'createTime',
},{
    title: '最后更新时间',
    width: 100,
    key: 'updateTime',
}


主键ID
原文
解析后的文本
数据插入时间
最后更新时间


id
raw_text
after_text
create_time
update_time


id
rawText
afterText
createTime
updateTime

tableName : tb_ocr_info

a.id, a.raw_text, a.after_text, a.create_time, a.update_time,


a.id,
a.raw_text,
a.after_text,
a.create_time,
a.update_time,


// api/api.js 中, 需要生成的代码

  ocrInfoFind(query) {
    return this.get('/ocrInfo/find', query)
  }

  ocrInfoFindAll(query) {
    return this.getFindAll('/ocrInfo/find', query)
  }

  ocrInfoAll() {
    return this.getAll('/ocrInfo/find')
  }

  ocrInfoOne(id) {
    return this.getOne('/ocrInfo/find', id)
  }

  ocrInfoAddUpdate(obj, by) {
    return this.postBy('/ocrInfo/addUpdate', obj, by)
  }

  ocrInfoDelete(obj) {
    return this.post('/ocrInfo/delete', obj)
  }


// router/index.js 中, 需要生成的代码

  {
    path: '/-frontFilePath-/ocrInfo',
    component: () => import('@/views/-frontFilePath-/ocrInfo'),
  },


      // 前端代码中详情数据的展示
      <el-descriptions border :column="2">
        <!--<el-descriptions-item label="主键ID">{{ temp.id }}</el-descriptions-item>-->
        <el-descriptions-item label="原文">{{ temp.rawText }}</el-descriptions-item>
        <el-descriptions-item label="解析后的文本">{{ temp.afterText }}</el-descriptions-item>
        <!--<el-descriptions-item label="数据插入时间">{{ temp.createTime }}</el-descriptions-item>-->
        <!--<el-descriptions-item label="最后更新时间">{{ temp.updateTime }}</el-descriptions-item>-->
      </el-descriptions>

      <el-form label-position="left" inline class="demo-table-expand">
        <!--<el-form-item label="主键ID"><span>{{temp.id}}</span></el-form-item>-->
        <el-form-item label="原文"><span>{{temp.rawText}}</span></el-form-item>
        <el-form-item label="解析后的文本"><span>{{temp.afterText}}</span></el-form-item>
        <!--<el-form-item label="数据插入时间"><span>{{temp.createTime}}</span></el-form-item>-->
        <!--<el-form-item label="最后更新时间"><span>{{temp.updateTime}}</span></el-form-item>-->
      </el-form>



''

 

| page                | 否 | 整数     | 页码,第几页,编号从 1 开始, 默认第1页
| size                | 否 | 整数     | 每页多少条数据,默认值:1 , 最大1000
| limit               | 否 | 整数     | 每页多少条数据,默认值:1 , 最大1000,与size 一样
| id                  | 否 | 字符串   | id,例如: 1234
| ids                 | 否 | 字符串   | 多个id以逗号分隔,例如: 1234,2345
| startTime           | 否 | 日期时间 | 开始时间,例如 : 2017-01-01 12:13:14 </br> 或者 例如 : 2017-01-01
| endTime             | 否 | 日期时间 | 结束时间,例如 : 2023-01-02 12:13:14 </br> 或者 例如 : 2023-01-02
| all                 | 否 | 字符串   | 分页状态下,查询出全部数据,相当于page=1,size=2000
| _all                | 否 | 字符串   | 查询全部的原始数据,小心使用,相当于page=1,size=20000,_raw=_raw
| _one                | 否 | 字符串   | 查询出一条数据,相当于page=1,size=1,返回对象,不是数组
| _raw                | 否 | 字符串   | 原始数据查询,查询原始表数据,不附带其他,数据结构与表对应起来
| createTimeFrom      | 否 | 日期时间 | 产生时间的开始时间,例如 : 2023-01-02 12:13:14 </br> 或者 例如 : 2023-01-02
| createTimeTo        | 否 | 日期时间 | 产生时间的结束时间,例如 : 2023-01-02 12:13:14 </br> 或者 例如 : 2023-01-02
| updateTimeFrom      | 否 | 日期时间 | 更新时间的开始时间,例如 : 2023-01-02 12:13:14 </br> 或者 例如 : 2023-01-02
| updateTimeTo        | 否 | 日期时间 | 更新时间的结束时间,例如 : 2023-01-02 12:13:14 </br> 或者 例如 : 2023-01-02

| id                  | 是 | 字符串   | 主键ID</br>***最大长度:32***
| rawText             | 否 | 字符串   | 原文</br>***最大长度:65535***
| afterText           | 否 | 字符串   | 解析后的文本</br>***最大长度:65535***
| createTime          | 是 | 日期时间 | 数据插入时间</br>格式 : yyyy-MM-dd HH:mm:ss </br> 例如 : 2013-05-09 12:13:14
| updateTime          | 是 | 日期时间 | 最后更新时间</br>格式 : yyyy-MM-dd HH:mm:ss </br> 例如 : 2013-05-09 12:13:14


    // TODO: controller 通用模板
    // TODO: controller 通用模板
    // TODO: controller 通用模板
    @GetMapping("info")
    public ReturnData info(
            @RequestParam(name = "rawText", required = false) String rawText,
            @RequestParam(name = "afterText", required = false) String afterText
    ) throws Exception {
        List<OcrInfoEntity> list = ocrInfoService.findByInfo(
                rawText,
                afterText
        );
        return ok(list);
    }

    @GetMapping("infoOne")
    public ReturnData infoOne(
            @RequestParam(name = "rawText", required = false) String rawText,
            @RequestParam(name = "afterText", required = false) String afterText
    ) throws Exception {
        OcrInfoEntity one = ocrInfoService.findOneByInfo(
                rawText,
                afterText
        );
        return ok(one);
    }


    // TODO: service 通用模板
    // TODO: service 通用模板
    // TODO: service 通用模板
    public int updateByInfo(
            String id,
            String rawText,
            String afterText
    ) {
        return ocrInfoMapper.updateByInfo(
                id,
                rawText,
                afterText
        );
    }

    public List<OcrInfoEntity> findByInfo(
            String rawText,
            String afterText
    ) {
        List<OcrInfoEntity> list = ocrInfoMapper.findByInfo(
                rawText,
                afterText
        );
        return list;
    }

    public OcrInfoEntity findOneByInfo(
            String rawText,
            String afterText
    ) {
        OcrInfoEntity one = ocrInfoMapper.findOneByInfo(
                rawText,
                afterText
        );
        return one;
    }


    // TODO: mapper 通用模板
    // TODO: mapper 通用模板
    // TODO: mapper 通用模板
    @Update(" update tb_ocr_info set" +
            " raw_text = #{rawText}, after_text = #{afterText}, update_time = now()" +
            " where id = #{id}")
    int updateByInfo(@Param("id") String id,
                     @Param("rawText") String rawText,
                     @Param("afterText") String afterText);

    @Select("SELECT a.* FROM tb_ocr_info a" +
            " WHERE a.raw_text = #{rawText}" +
            " AND a.after_text = #{afterText}" +
            " order by a.id desc LIMIT 10000")
    List<OcrInfoEntity> findByInfo(@Param("rawText") String rawText,
                                   @Param("afterText") String afterText);

    @Select("SELECT a.* FROM tb_ocr_info a" +
            " WHERE a.raw_text = #{rawText}" +
            " AND a.after_text = #{afterText}" +
            " order by a.id desc LIMIT 1")
    OcrInfoEntity findOneByInfo(@Param("rawText") String rawText,
                                @Param("afterText") String afterText);
