{
    "id": "id",
    "orderNo": "orderNo",
    "merchantNo": "merchantNo",
    "merTransactionId": "merTransactionId",
    "amount": "amount",
    "bankCode": "bankCode",
    "cardNo": "cardNo",
    "name": "name",
    "phone": "phone",
    "operatorId": "operatorId",
    "status": "status",
    "callBackStatus": "callBackStatus",
    "callBackTime": "callBackTime",
    "createTime": "createTime",
    "updateTime": "updateTime"
}


@RequestParam(name = "id", required = false) String id,
@RequestParam(name = "orderNo", required = false) String orderNo,
@RequestParam(name = "merchantNo", required = false) String merchantNo,
@RequestParam(name = "merTransactionId", required = false) String merTransactionId,
@RequestParam(name = "amount", required = false) Integer amount,
@RequestParam(name = "bankCode", required = false) String bankCode,
@RequestParam(name = "cardNo", required = false) String cardNo,
@RequestParam(name = "name", required = false) String name,
@RequestParam(name = "phone", required = false) String phone,
@RequestParam(name = "operatorId", required = false) String operatorId,
@RequestParam(name = "status", required = false) String status,
@RequestParam(name = "callBackStatus", required = false) String callBackStatus,
@RequestParam(name = "callBackTime", required = false) LocalDateTime callBackTime,
@RequestParam(name = "createTime", required = false) LocalDateTime createTime,
@RequestParam(name = "updateTime", required = false) LocalDateTime updateTime


{
    title: '主键ID',
    key: 'id',
},{
    title: '平台订单号',
    key: 'orderNo',
},{
    title: '商户编号',
    key: 'merchantNo',
},{
    title: '商户订单号',
    key: 'merTransactionId',
},{
    title: '金额',
    key: 'amount',
},{
    title: '银行编码',
    key: 'bankCode',
},{
    title: '银行卡号',
    key: 'cardNo',
},{
    title: '姓名',
    key: 'name',
},{
    title: '手机号',
    key: 'phone',
},{
    title: '员工ID',
    key: 'operatorId',
},{
    title: '订单状态',
    key: 'status',
},{
    title: '回调状态',
    key: 'callBackStatus',
},{
    title: '回调时间',
    key: 'callBackTime',
},{
    title: '创建时间',
    key: 'createTime',
},{
    title: '更新时间',
    key: 'updateTime',
}


{
    title: '主键ID',
    width: 100,
    key: 'id',
},{
    title: '平台订单号',
    width: 100,
    key: 'orderNo',
},{
    title: '商户编号',
    width: 100,
    key: 'merchantNo',
},{
    title: '商户订单号',
    width: 100,
    key: 'merTransactionId',
},{
    title: '金额',
    width: 100,
    key: 'amount',
},{
    title: '银行编码',
    width: 100,
    key: 'bankCode',
},{
    title: '银行卡号',
    width: 100,
    key: 'cardNo',
},{
    title: '姓名',
    width: 100,
    key: 'name',
},{
    title: '手机号',
    width: 100,
    key: 'phone',
},{
    title: '员工ID',
    width: 100,
    key: 'operatorId',
},{
    title: '订单状态',
    width: 100,
    key: 'status',
},{
    title: '回调状态',
    width: 100,
    key: 'callBackStatus',
},{
    title: '回调时间',
    width: 100,
    key: 'callBackTime',
},{
    title: '创建时间',
    width: 100,
    key: 'createTime',
},{
    title: '更新时间',
    width: 100,
    key: 'updateTime',
}


主键ID
平台订单号
商户编号
商户订单号
金额
银行编码
银行卡号
姓名
手机号
员工ID
订单状态
回调状态
回调时间
创建时间
更新时间


id
order_no
merchant_no
mer_transaction_id
amount
bank_code
card_no
name
phone
operator_id
status
call_back_status
call_back_time
create_time
update_time


id
orderNo
merchantNo
merTransactionId
amount
bankCode
cardNo
name
phone
operatorId
status
callBackStatus
callBackTime
createTime
updateTime

tableName : tb_disburse_order

a.id, a.order_no, a.merchant_no, a.mer_transaction_id, a.amount, a.bank_code, a.card_no, a.name, a.phone, a.operator_id, a.status, a.call_back_status, a.call_back_time, a.create_time, a.update_time,


a.id,
a.order_no,
a.merchant_no,
a.mer_transaction_id,
a.amount,
a.bank_code,
a.card_no,
a.name,
a.phone,
a.operator_id,
a.status,
a.call_back_status,
a.call_back_time,
a.create_time,
a.update_time,


// api/api.js 中, 需要生成的代码

  disburseOrderFind(query) {
    return this.get('/disburseOrder/find', query)
  }

  disburseOrderFindAll(query) {
    return this.getFindAll('/disburseOrder/find', query)
  }

  disburseOrderAll() {
    return this.getAll('/disburseOrder/find')
  }

  disburseOrderOne(id) {
    return this.getOne('/disburseOrder/find', id)
  }

  disburseOrderAddUpdate(obj, by) {
    return this.postBy('/disburseOrder/addUpdate', obj, by)
  }

  disburseOrderDelete(obj) {
    return this.post('/disburseOrder/delete', obj)
  }


// router/index.js 中, 需要生成的代码

  {
    path: '/-frontFilePath-/disburseOrder',
    component: () => import('@/views/-frontFilePath-/disburseOrder'),
  },


      // 前端代码中详情数据的展示
      <el-descriptions border :column="2">
        <!--<el-descriptions-item label="主键ID">{{ temp.id }}</el-descriptions-item>-->
        <el-descriptions-item label="平台订单号">{{ temp.orderNo }}</el-descriptions-item>
        <el-descriptions-item label="商户编号">{{ temp.merchantNo }}</el-descriptions-item>
        <!--<el-descriptions-item label="商户订单号">{{ temp.merTransactionId }}</el-descriptions-item>-->
        <el-descriptions-item label="金额">{{ temp.amount }}</el-descriptions-item>
        <el-descriptions-item label="银行编码">{{ temp.bankCode }}</el-descriptions-item>
        <el-descriptions-item label="银行卡号">{{ temp.cardNo }}</el-descriptions-item>
        <el-descriptions-item label="姓名">{{ temp.name }}</el-descriptions-item>
        <el-descriptions-item label="手机号">{{ temp.phone }}</el-descriptions-item>
        <!--<el-descriptions-item label="员工ID">{{ temp.operatorId }}</el-descriptions-item>-->
        <el-descriptions-item label="订单状态">{{ temp.status }}</el-descriptions-item>
        <el-descriptions-item label="回调状态">{{ temp.callBackStatus }}</el-descriptions-item>
        <el-descriptions-item label="回调时间">{{ temp.callBackTime }}</el-descriptions-item>
        <!--<el-descriptions-item label="创建时间">{{ temp.createTime }}</el-descriptions-item>-->
        <!--<el-descriptions-item label="更新时间">{{ temp.updateTime }}</el-descriptions-item>-->
      </el-descriptions>

      <el-form label-position="left" inline class="demo-table-expand">
        <!--<el-form-item label="主键ID"><span>{{temp.id}}</span></el-form-item>-->
        <el-form-item label="平台订单号"><span>{{temp.orderNo}}</span></el-form-item>
        <el-form-item label="商户编号"><span>{{temp.merchantNo}}</span></el-form-item>
        <!--<el-form-item label="商户订单号"><span>{{temp.merTransactionId}}</span></el-form-item>-->
        <el-form-item label="金额"><span>{{temp.amount}}</span></el-form-item>
        <el-form-item label="银行编码"><span>{{temp.bankCode}}</span></el-form-item>
        <el-form-item label="银行卡号"><span>{{temp.cardNo}}</span></el-form-item>
        <el-form-item label="姓名"><span>{{temp.name}}</span></el-form-item>
        <el-form-item label="手机号"><span>{{temp.phone}}</span></el-form-item>
        <!--<el-form-item label="员工ID"><span>{{temp.operatorId}}</span></el-form-item>-->
        <el-form-item label="订单状态"><span>{{temp.status}}</span></el-form-item>
        <el-form-item label="回调状态"><span>{{temp.callBackStatus}}</span></el-form-item>
        <el-form-item label="回调时间"><span>{{temp.callBackTime}}</span></el-form-item>
        <!--<el-form-item label="创建时间"><span>{{temp.createTime}}</span></el-form-item>-->
        <!--<el-form-item label="更新时间"><span>{{temp.updateTime}}</span></el-form-item>-->
      </el-form>



'平台订单号', '商户编号', '金额', '银行编码', '银行卡号', '姓名', '手机号', '订单状态', '回调状态', '回调时间'

'orderNo', 'merchantNo', 'amount', 'bankCode', 'cardNo', 'name', 'phone', 'status', 'callBackStatus', 'callBackTime'

| page                | 否 | 整数     | 页码,第几页,编号从 1 开始, 默认第1页
| size                | 否 | 整数     | 每页多少条数据,默认值:1 , 最大1000
| limit               | 否 | 整数     | 每页多少条数据,默认值:1 , 最大1000,与size 一样
| id                  | 否 | 字符串   | id,例如: 1234
| ids                 | 否 | 字符串   | 多个id以逗号分隔,例如: 1234,2345
| merTransactionId    | 否 | 字符串   | 商户订单号-多个以逗号分割
| operatorId          | 否 | 字符串   | 员工ID-多个以逗号分割
| startTime           | 否 | 日期时间 | 开始时间,例如 : 2017-01-01 12:13:14 </br> 或者 例如 : 2017-01-01
| endTime             | 否 | 日期时间 | 结束时间,例如 : 2023-01-02 12:13:14 </br> 或者 例如 : 2023-01-02
| all                 | 否 | 字符串   | 分页状态下,查询出全部数据,相当于page=1,size=2000
| _all                | 否 | 字符串   | 查询全部的原始数据,小心使用,相当于page=1,size=20000,_raw=_raw
| _one                | 否 | 字符串   | 查询出一条数据,相当于page=1,size=1,返回对象,不是数组
| _raw                | 否 | 字符串   | 原始数据查询,查询原始表数据,不附带其他,数据结构与表对应起来
| createTimeFrom      | 否 | 日期时间 | 产生时间的开始时间,例如 : 2023-01-02 12:13:14 </br> 或者 例如 : 2023-01-02
| createTimeTo        | 否 | 日期时间 | 产生时间的结束时间,例如 : 2023-01-02 12:13:14 </br> 或者 例如 : 2023-01-02
| updateTimeFrom      | 否 | 日期时间 | 更新时间的开始时间,例如 : 2023-01-02 12:13:14 </br> 或者 例如 : 2023-01-02
| updateTimeTo        | 否 | 日期时间 | 更新时间的结束时间,例如 : 2023-01-02 12:13:14 </br> 或者 例如 : 2023-01-02

| id                  | 是 | 字符串   | 主键ID</br>***最大长度:50***
| orderNo             | 是 | 字符串   | 平台订单号</br>***最大长度:50***
| merchantNo          | 是 | 字符串   | 商户编号</br>***最大长度:50***
| merTransactionId    | 是 | 字符串   | 商户订单号</br>***最大长度:50***
| amount              | 是 | 整数     | 金额</br>***整数最大长度:10***</br>***小数最大长度:0***
| bankCode            | 是 | 字符串   | 银行编码</br>***最大长度:20***
| cardNo              | 是 | 字符串   | 银行卡号</br>***最大长度:50***
| name                | 是 | 字符串   | 姓名</br>***最大长度:50***
| phone               | 是 | 字符串   | 手机号</br>***最大长度:20***
| operatorId          | 否 | 字符串   | 员工ID</br>***最大长度:50***
| status              | 是 | 字符串   | 订单状态</br>***最大长度:20***
| callBackStatus      | 否 | 字符串   | 回调状态</br>***最大长度:20***
| callBackTime        | 否 | 日期时间 | 回调时间</br>格式 : yyyy-MM-dd HH:mm:ss </br> 例如 : 2013-05-09 12:13:14
| createTime          | 是 | 日期时间 | 创建时间</br>格式 : yyyy-MM-dd HH:mm:ss </br> 例如 : 2013-05-09 12:13:14
| updateTime          | 是 | 日期时间 | 更新时间</br>格式 : yyyy-MM-dd HH:mm:ss </br> 例如 : 2013-05-09 12:13:14


    // TODO: controller 通用模板
    // TODO: controller 通用模板
    // TODO: controller 通用模板
    @GetMapping("info")
    public ReturnData info(
            @RequestParam(name = "orderNo", required = false) String orderNo,
            @RequestParam(name = "merchantNo", required = false) String merchantNo,
            @RequestParam(name = "merTransactionId", required = false) String merTransactionId,
            @RequestParam(name = "amount", required = false) Integer amount,
            @RequestParam(name = "bankCode", required = false) String bankCode,
            @RequestParam(name = "cardNo", required = false) String cardNo,
            @RequestParam(name = "name", required = false) String name,
            @RequestParam(name = "phone", required = false) String phone,
            @RequestParam(name = "operatorId", required = false) String operatorId,
            @RequestParam(name = "status", required = false) String status,
            @RequestParam(name = "callBackStatus", required = false) String callBackStatus,
            @RequestParam(name = "callBackTime", required = false) LocalDateTime callBackTime
    ) throws Exception {
        List<DisburseOrderEntity> list = disburseOrderService.findByInfo(
                orderNo,
                merchantNo,
                merTransactionId,
                amount,
                bankCode,
                cardNo,
                name,
                phone,
                operatorId,
                status,
                callBackStatus,
                callBackTime
        );
        return ok(list);
    }

    @GetMapping("infoOne")
    public ReturnData infoOne(
            @RequestParam(name = "orderNo", required = false) String orderNo,
            @RequestParam(name = "merchantNo", required = false) String merchantNo,
            @RequestParam(name = "merTransactionId", required = false) String merTransactionId,
            @RequestParam(name = "amount", required = false) Integer amount,
            @RequestParam(name = "bankCode", required = false) String bankCode,
            @RequestParam(name = "cardNo", required = false) String cardNo,
            @RequestParam(name = "name", required = false) String name,
            @RequestParam(name = "phone", required = false) String phone,
            @RequestParam(name = "operatorId", required = false) String operatorId,
            @RequestParam(name = "status", required = false) String status,
            @RequestParam(name = "callBackStatus", required = false) String callBackStatus,
            @RequestParam(name = "callBackTime", required = false) LocalDateTime callBackTime
    ) throws Exception {
        DisburseOrderEntity one = disburseOrderService.findOneByInfo(
                orderNo,
                merchantNo,
                merTransactionId,
                amount,
                bankCode,
                cardNo,
                name,
                phone,
                operatorId,
                status,
                callBackStatus,
                callBackTime
        );
        return ok(one);
    }


    // TODO: service 通用模板
    // TODO: service 通用模板
    // TODO: service 通用模板
    public int updateByInfo(
            String id,
            String orderNo,
            String merchantNo,
            String merTransactionId,
            Integer amount,
            String bankCode,
            String cardNo,
            String name,
            String phone,
            String operatorId,
            String status,
            String callBackStatus,
            LocalDateTime callBackTime
    ) {
        return disburseOrderMapper.updateByInfo(
                id,
                orderNo,
                merchantNo,
                merTransactionId,
                amount,
                bankCode,
                cardNo,
                name,
                phone,
                operatorId,
                status,
                callBackStatus,
                callBackTime
        );
    }

    public List<DisburseOrderEntity> findByInfo(
            String orderNo,
            String merchantNo,
            String merTransactionId,
            Integer amount,
            String bankCode,
            String cardNo,
            String name,
            String phone,
            String operatorId,
            String status,
            String callBackStatus,
            LocalDateTime callBackTime
    ) {
        List<DisburseOrderEntity> list = disburseOrderMapper.findByInfo(
                orderNo,
                merchantNo,
                merTransactionId,
                amount,
                bankCode,
                cardNo,
                name,
                phone,
                operatorId,
                status,
                callBackStatus,
                callBackTime
        );
        return list;
    }

    public DisburseOrderEntity findOneByInfo(
            String orderNo,
            String merchantNo,
            String merTransactionId,
            Integer amount,
            String bankCode,
            String cardNo,
            String name,
            String phone,
            String operatorId,
            String status,
            String callBackStatus,
            LocalDateTime callBackTime
    ) {
        DisburseOrderEntity one = disburseOrderMapper.findOneByInfo(
                orderNo,
                merchantNo,
                merTransactionId,
                amount,
                bankCode,
                cardNo,
                name,
                phone,
                operatorId,
                status,
                callBackStatus,
                callBackTime
        );
        return one;
    }


    // TODO: mapper 通用模板
    // TODO: mapper 通用模板
    // TODO: mapper 通用模板
    @Update(" update tb_disburse_order set" +
            " order_no = #{orderNo}, merchant_no = #{merchantNo}, mer_transaction_id = #{merTransactionId}," +
            " amount = #{amount}, bank_code = #{bankCode}, card_no = #{cardNo}, name = #{name}, phone = #{phone}, operator_id = #{operatorId}," +
            " status = #{status}, call_back_status = #{callBackStatus}, call_back_time = #{callBackTime}, update_time = now()" +
            " where id = #{id}")
    int updateByInfo(@Param("id") String id,
                     @Param("orderNo") String orderNo,
                     @Param("merchantNo") String merchantNo,
                     @Param("merTransactionId") String merTransactionId,
                     @Param("amount") Integer amount,
                     @Param("bankCode") String bankCode,
                     @Param("cardNo") String cardNo,
                     @Param("name") String name,
                     @Param("phone") String phone,
                     @Param("operatorId") String operatorId,
                     @Param("status") String status,
                     @Param("callBackStatus") String callBackStatus,
                     @Param("callBackTime") LocalDateTime callBackTime);

    @Select("SELECT a.* FROM tb_disburse_order a" +
            " WHERE a.order_no = #{orderNo}" +
            " AND a.merchant_no = #{merchantNo}" +
            " AND a.mer_transaction_id = #{merTransactionId}" +
            " AND a.amount = #{amount}" +
            " AND a.bank_code = #{bankCode}" +
            " AND a.card_no = #{cardNo}" +
            " AND a.name = #{name}" +
            " AND a.phone = #{phone}" +
            " AND a.operator_id = #{operatorId}" +
            " AND a.status = #{status}" +
            " AND a.call_back_status = #{callBackStatus}" +
            " AND a.call_back_time = #{callBackTime}" +
            " order by a.id desc LIMIT 10000")
    List<DisburseOrderEntity> findByInfo(@Param("orderNo") String orderNo,
                                         @Param("merchantNo") String merchantNo,
                                         @Param("merTransactionId") String merTransactionId,
                                         @Param("amount") Integer amount,
                                         @Param("bankCode") String bankCode,
                                         @Param("cardNo") String cardNo,
                                         @Param("name") String name,
                                         @Param("phone") String phone,
                                         @Param("operatorId") String operatorId,
                                         @Param("status") String status,
                                         @Param("callBackStatus") String callBackStatus,
                                         @Param("callBackTime") LocalDateTime callBackTime);

    @Select("SELECT a.* FROM tb_disburse_order a" +
            " WHERE a.order_no = #{orderNo}" +
            " AND a.merchant_no = #{merchantNo}" +
            " AND a.mer_transaction_id = #{merTransactionId}" +
            " AND a.amount = #{amount}" +
            " AND a.bank_code = #{bankCode}" +
            " AND a.card_no = #{cardNo}" +
            " AND a.name = #{name}" +
            " AND a.phone = #{phone}" +
            " AND a.operator_id = #{operatorId}" +
            " AND a.status = #{status}" +
            " AND a.call_back_status = #{callBackStatus}" +
            " AND a.call_back_time = #{callBackTime}" +
            " order by a.id desc LIMIT 1")
    DisburseOrderEntity findOneByInfo(@Param("orderNo") String orderNo,
                                      @Param("merchantNo") String merchantNo,
                                      @Param("merTransactionId") String merTransactionId,
                                      @Param("amount") Integer amount,
                                      @Param("bankCode") String bankCode,
                                      @Param("cardNo") String cardNo,
                                      @Param("name") String name,
                                      @Param("phone") String phone,
                                      @Param("operatorId") String operatorId,
                                      @Param("status") String status,
                                      @Param("callBackStatus") String callBackStatus,
                                      @Param("callBackTime") LocalDateTime callBackTime);
