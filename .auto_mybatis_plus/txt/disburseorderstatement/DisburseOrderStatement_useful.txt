{
    "id": "id",
    "orderNo": "orderNo",
    "amount": "amount",
    "bankCode": "bankCode",
    "cardNo": "cardNo",
    "operatorId": "operatorId",
    "status": "status",
    "proof": "proof",
    "proofInfo": "proofInfo",
    "disburseBankCardId": "disburseBankCardId",
    "disburseBankCardNo": "disburseBankCardNo",
    "disburseTime": "disburseTime",
    "disburseEndTime": "disburseEndTime",
    "reason": "reason",
    "createTime": "createTime",
    "updateTime": "updateTime"
}


@RequestParam(name = "id", required = false) String id,
@RequestParam(name = "orderNo", required = false) String orderNo,
@RequestParam(name = "amount", required = false) Integer amount,
@RequestParam(name = "bankCode", required = false) String bankCode,
@RequestParam(name = "cardNo", required = false) String cardNo,
@RequestParam(name = "operatorId", required = false) String operatorId,
@RequestParam(name = "status", required = false) String status,
@RequestParam(name = "proof", required = false) String proof,
@RequestParam(name = "proofInfo", required = false) String proofInfo,
@RequestParam(name = "disburseBankCardId", required = false) String disburseBankCardId,
@RequestParam(name = "disburseBankCardNo", required = false) String disburseBankCardNo,
@RequestParam(name = "disburseTime", required = false) LocalDateTime disburseTime,
@RequestParam(name = "disburseEndTime", required = false) LocalDateTime disburseEndTime,
@RequestParam(name = "reason", required = false) String reason,
@RequestParam(name = "createTime", required = false) LocalDateTime createTime,
@RequestParam(name = "updateTime", required = false) LocalDateTime updateTime


{
    title: '主键ID',
    key: 'id',
},{
    title: '平台订单号',
    key: 'orderNo',
},{
    title: '金额',
    key: 'amount',
},{
    title: '银行编码',
    key: 'bankCode',
},{
    title: '银行卡号',
    key: 'cardNo',
},{
    title: '操作员ID',
    key: 'operatorId',
},{
    title: '状态',
    key: 'status',
},{
    title: '凭证',
    key: 'proof',
},{
    title: '凭证信息',
    key: 'proofInfo',
},{
    title: '代付银行卡ID',
    key: 'disburseBankCardId',
},{
    title: '代付银行卡号',
    key: 'disburseBankCardNo',
},{
    title: '代付时间',
    key: 'disburseTime',
},{
    title: '代付结束时间',
    key: 'disburseEndTime',
},{
    title: '失败原因',
    key: 'reason',
},{
    title: '创建时间',
    key: 'createTime',
},{
    title: '更新时间',
    key: 'updateTime',
}


{
    title: '主键ID',
    width: 100,
    key: 'id',
},{
    title: '平台订单号',
    width: 100,
    key: 'orderNo',
},{
    title: '金额',
    width: 100,
    key: 'amount',
},{
    title: '银行编码',
    width: 100,
    key: 'bankCode',
},{
    title: '银行卡号',
    width: 100,
    key: 'cardNo',
},{
    title: '操作员ID',
    width: 100,
    key: 'operatorId',
},{
    title: '状态',
    width: 100,
    key: 'status',
},{
    title: '凭证',
    width: 100,
    key: 'proof',
},{
    title: '凭证信息',
    width: 100,
    key: 'proofInfo',
},{
    title: '代付银行卡ID',
    width: 100,
    key: 'disburseBankCardId',
},{
    title: '代付银行卡号',
    width: 100,
    key: 'disburseBankCardNo',
},{
    title: '代付时间',
    width: 100,
    key: 'disburseTime',
},{
    title: '代付结束时间',
    width: 100,
    key: 'disburseEndTime',
},{
    title: '失败原因',
    width: 100,
    key: 'reason',
},{
    title: '创建时间',
    width: 100,
    key: 'createTime',
},{
    title: '更新时间',
    width: 100,
    key: 'updateTime',
}


主键ID
平台订单号
金额
银行编码
银行卡号
操作员ID
状态
凭证
凭证信息
代付银行卡ID
代付银行卡号
代付时间
代付结束时间
失败原因
创建时间
更新时间


id
order_no
amount
bank_code
card_no
operator_id
status
proof
proof_info
disburse_bank_card_id
disburse_bank_card_no
disburse_time
disburse_end_time
reason
create_time
update_time


id
orderNo
amount
bankCode
cardNo
operatorId
status
proof
proofInfo
disburseBankCardId
disburseBankCardNo
disburseTime
disburseEndTime
reason
createTime
updateTime

tableName : tb_disburse_order_statement

a.id, a.order_no, a.amount, a.bank_code, a.card_no, a.operator_id, a.status, a.proof, a.proof_info, a.disburse_bank_card_id, a.disburse_bank_card_no, a.disburse_time, a.disburse_end_time, a.reason, a.create_time, a.update_time,


a.id,
a.order_no,
a.amount,
a.bank_code,
a.card_no,
a.operator_id,
a.status,
a.proof,
a.proof_info,
a.disburse_bank_card_id,
a.disburse_bank_card_no,
a.disburse_time,
a.disburse_end_time,
a.reason,
a.create_time,
a.update_time,


// api/api.js 中, 需要生成的代码

  disburseOrderStatementFind(query) {
    return this.get('/disburseOrderStatement/find', query)
  }

  disburseOrderStatementFindAll(query) {
    return this.getFindAll('/disburseOrderStatement/find', query)
  }

  disburseOrderStatementAll() {
    return this.getAll('/disburseOrderStatement/find')
  }

  disburseOrderStatementOne(id) {
    return this.getOne('/disburseOrderStatement/find', id)
  }

  disburseOrderStatementAddUpdate(obj, by) {
    return this.postBy('/disburseOrderStatement/addUpdate', obj, by)
  }

  disburseOrderStatementDelete(obj) {
    return this.post('/disburseOrderStatement/delete', obj)
  }


// router/index.js 中, 需要生成的代码

  {
    path: '/-frontFilePath-/disburseOrderStatement',
    component: () => import('@/views/-frontFilePath-/disburseOrderStatement'),
  },


      // 前端代码中详情数据的展示
      <el-descriptions border :column="2">
        <!--<el-descriptions-item label="主键ID">{{ temp.id }}</el-descriptions-item>-->
        <el-descriptions-item label="平台订单号">{{ temp.orderNo }}</el-descriptions-item>
        <el-descriptions-item label="金额">{{ temp.amount }}</el-descriptions-item>
        <el-descriptions-item label="银行编码">{{ temp.bankCode }}</el-descriptions-item>
        <el-descriptions-item label="银行卡号">{{ temp.cardNo }}</el-descriptions-item>
        <!--<el-descriptions-item label="操作员ID">{{ temp.operatorId }}</el-descriptions-item>-->
        <el-descriptions-item label="状态">{{ temp.status }}</el-descriptions-item>
        <el-descriptions-item label="凭证">{{ temp.proof }}</el-descriptions-item>
        <el-descriptions-item label="凭证信息">{{ temp.proofInfo }}</el-descriptions-item>
        <!--<el-descriptions-item label="代付银行卡ID">{{ temp.disburseBankCardId }}</el-descriptions-item>-->
        <el-descriptions-item label="代付银行卡号">{{ temp.disburseBankCardNo }}</el-descriptions-item>
        <el-descriptions-item label="代付时间">{{ temp.disburseTime }}</el-descriptions-item>
        <el-descriptions-item label="代付结束时间">{{ temp.disburseEndTime }}</el-descriptions-item>
        <el-descriptions-item label="失败原因">{{ temp.reason }}</el-descriptions-item>
        <!--<el-descriptions-item label="创建时间">{{ temp.createTime }}</el-descriptions-item>-->
        <!--<el-descriptions-item label="更新时间">{{ temp.updateTime }}</el-descriptions-item>-->
      </el-descriptions>

      <el-form label-position="left" inline class="demo-table-expand">
        <!--<el-form-item label="主键ID"><span>{{temp.id}}</span></el-form-item>-->
        <el-form-item label="平台订单号"><span>{{temp.orderNo}}</span></el-form-item>
        <el-form-item label="金额"><span>{{temp.amount}}</span></el-form-item>
        <el-form-item label="银行编码"><span>{{temp.bankCode}}</span></el-form-item>
        <el-form-item label="银行卡号"><span>{{temp.cardNo}}</span></el-form-item>
        <!--<el-form-item label="操作员ID"><span>{{temp.operatorId}}</span></el-form-item>-->
        <el-form-item label="状态"><span>{{temp.status}}</span></el-form-item>
        <el-form-item label="凭证"><span>{{temp.proof}}</span></el-form-item>
        <el-form-item label="凭证信息"><span>{{temp.proofInfo}}</span></el-form-item>
        <!--<el-form-item label="代付银行卡ID"><span>{{temp.disburseBankCardId}}</span></el-form-item>-->
        <el-form-item label="代付银行卡号"><span>{{temp.disburseBankCardNo}}</span></el-form-item>
        <el-form-item label="代付时间"><span>{{temp.disburseTime}}</span></el-form-item>
        <el-form-item label="代付结束时间"><span>{{temp.disburseEndTime}}</span></el-form-item>
        <el-form-item label="失败原因"><span>{{temp.reason}}</span></el-form-item>
        <!--<el-form-item label="创建时间"><span>{{temp.createTime}}</span></el-form-item>-->
        <!--<el-form-item label="更新时间"><span>{{temp.updateTime}}</span></el-form-item>-->
      </el-form>



'平台订单号', '金额', '银行编码', '银行卡号', '状态', '凭证', '凭证信息', '代付银行卡号', '代付时间', '代付结束时间', '失败原因'

'orderNo', 'amount', 'bankCode', 'cardNo', 'status', 'proof', 'proofInfo', 'disburseBankCardNo', 'disburseTime', 'disburseEndTime', 'reason'

| page                | 否 | 整数     | 页码,第几页,编号从 1 开始, 默认第1页
| size                | 否 | 整数     | 每页多少条数据,默认值:1 , 最大1000
| limit               | 否 | 整数     | 每页多少条数据,默认值:1 , 最大1000,与size 一样
| id                  | 否 | 字符串   | id,例如: 1234
| ids                 | 否 | 字符串   | 多个id以逗号分隔,例如: 1234,2345
| operatorId          | 否 | 字符串   | 操作员ID-多个以逗号分割
| disburseBankCardId  | 否 | 字符串   | 代付银行卡ID-多个以逗号分割
| startTime           | 否 | 日期时间 | 开始时间,例如 : 2017-01-01 12:13:14 </br> 或者 例如 : 2017-01-01
| endTime             | 否 | 日期时间 | 结束时间,例如 : 2023-01-02 12:13:14 </br> 或者 例如 : 2023-01-02
| all                 | 否 | 字符串   | 分页状态下,查询出全部数据,相当于page=1,size=2000
| _all                | 否 | 字符串   | 查询全部的原始数据,小心使用,相当于page=1,size=20000,_raw=_raw
| _one                | 否 | 字符串   | 查询出一条数据,相当于page=1,size=1,返回对象,不是数组
| _raw                | 否 | 字符串   | 原始数据查询,查询原始表数据,不附带其他,数据结构与表对应起来
| createTimeFrom      | 否 | 日期时间 | 产生时间的开始时间,例如 : 2023-01-02 12:13:14 </br> 或者 例如 : 2023-01-02
| createTimeTo        | 否 | 日期时间 | 产生时间的结束时间,例如 : 2023-01-02 12:13:14 </br> 或者 例如 : 2023-01-02
| updateTimeFrom      | 否 | 日期时间 | 更新时间的开始时间,例如 : 2023-01-02 12:13:14 </br> 或者 例如 : 2023-01-02
| updateTimeTo        | 否 | 日期时间 | 更新时间的结束时间,例如 : 2023-01-02 12:13:14 </br> 或者 例如 : 2023-01-02

| id                  | 是 | 字符串   | 主键ID</br>***最大长度:50***
| orderNo             | 是 | 字符串   | 平台订单号</br>***最大长度:50***
| amount              | 是 | 整数     | 金额</br>***整数最大长度:10***</br>***小数最大长度:0***
| bankCode            | 是 | 字符串   | 银行编码</br>***最大长度:20***
| cardNo              | 是 | 字符串   | 银行卡号</br>***最大长度:50***
| operatorId          | 否 | 字符串   | 操作员ID</br>***最大长度:50***
| status              | 是 | 字符串   | 状态</br>***最大长度:20***
| proof               | 否 | 字符串   | 凭证</br>***最大长度:255***
| proofInfo           | 否 | 字符串   | 凭证信息</br>***最大长度:255***
| disburseBankCardId  | 是 | 字符串   | 代付银行卡ID</br>***最大长度:50***
| disburseBankCardNo  | 是 | 字符串   | 代付银行卡号</br>***最大长度:50***
| disburseTime        | 否 | 日期时间 | 代付时间</br>格式 : yyyy-MM-dd HH:mm:ss </br> 例如 : 2013-05-09 12:13:14
| disburseEndTime     | 否 | 日期时间 | 代付结束时间</br>格式 : yyyy-MM-dd HH:mm:ss </br> 例如 : 2013-05-09 12:13:14
| reason              | 否 | 字符串   | 失败原因</br>***最大长度:255***
| createTime          | 是 | 日期时间 | 创建时间</br>格式 : yyyy-MM-dd HH:mm:ss </br> 例如 : 2013-05-09 12:13:14
| updateTime          | 是 | 日期时间 | 更新时间</br>格式 : yyyy-MM-dd HH:mm:ss </br> 例如 : 2013-05-09 12:13:14


    // TODO: controller 通用模板
    // TODO: controller 通用模板
    // TODO: controller 通用模板
    @GetMapping("info")
    public ReturnData info(
            @RequestParam(name = "orderNo", required = false) String orderNo,
            @RequestParam(name = "amount", required = false) Integer amount,
            @RequestParam(name = "bankCode", required = false) String bankCode,
            @RequestParam(name = "cardNo", required = false) String cardNo,
            @RequestParam(name = "operatorId", required = false) String operatorId,
            @RequestParam(name = "status", required = false) String status,
            @RequestParam(name = "proof", required = false) String proof,
            @RequestParam(name = "proofInfo", required = false) String proofInfo,
            @RequestParam(name = "disburseBankCardId", required = false) String disburseBankCardId,
            @RequestParam(name = "disburseBankCardNo", required = false) String disburseBankCardNo,
            @RequestParam(name = "disburseTime", required = false) LocalDateTime disburseTime,
            @RequestParam(name = "disburseEndTime", required = false) LocalDateTime disburseEndTime,
            @RequestParam(name = "reason", required = false) String reason
    ) throws Exception {
        List<DisburseOrderStatementEntity> list = disburseOrderStatementService.findByInfo(
                orderNo,
                amount,
                bankCode,
                cardNo,
                operatorId,
                status,
                proof,
                proofInfo,
                disburseBankCardId,
                disburseBankCardNo,
                disburseTime,
                disburseEndTime,
                reason
        );
        return ok(list);
    }

    @GetMapping("infoOne")
    public ReturnData infoOne(
            @RequestParam(name = "orderNo", required = false) String orderNo,
            @RequestParam(name = "amount", required = false) Integer amount,
            @RequestParam(name = "bankCode", required = false) String bankCode,
            @RequestParam(name = "cardNo", required = false) String cardNo,
            @RequestParam(name = "operatorId", required = false) String operatorId,
            @RequestParam(name = "status", required = false) String status,
            @RequestParam(name = "proof", required = false) String proof,
            @RequestParam(name = "proofInfo", required = false) String proofInfo,
            @RequestParam(name = "disburseBankCardId", required = false) String disburseBankCardId,
            @RequestParam(name = "disburseBankCardNo", required = false) String disburseBankCardNo,
            @RequestParam(name = "disburseTime", required = false) LocalDateTime disburseTime,
            @RequestParam(name = "disburseEndTime", required = false) LocalDateTime disburseEndTime,
            @RequestParam(name = "reason", required = false) String reason
    ) throws Exception {
        DisburseOrderStatementEntity one = disburseOrderStatementService.findOneByInfo(
                orderNo,
                amount,
                bankCode,
                cardNo,
                operatorId,
                status,
                proof,
                proofInfo,
                disburseBankCardId,
                disburseBankCardNo,
                disburseTime,
                disburseEndTime,
                reason
        );
        return ok(one);
    }


    // TODO: service 通用模板
    // TODO: service 通用模板
    // TODO: service 通用模板
    public int updateByInfo(
            String id,
            String orderNo,
            Integer amount,
            String bankCode,
            String cardNo,
            String operatorId,
            String status,
            String proof,
            String proofInfo,
            String disburseBankCardId,
            String disburseBankCardNo,
            LocalDateTime disburseTime,
            LocalDateTime disburseEndTime,
            String reason
    ) {
        return disburseOrderStatementMapper.updateByInfo(
                id,
                orderNo,
                amount,
                bankCode,
                cardNo,
                operatorId,
                status,
                proof,
                proofInfo,
                disburseBankCardId,
                disburseBankCardNo,
                disburseTime,
                disburseEndTime,
                reason
        );
    }

    public List<DisburseOrderStatementEntity> findByInfo(
            String orderNo,
            Integer amount,
            String bankCode,
            String cardNo,
            String operatorId,
            String status,
            String proof,
            String proofInfo,
            String disburseBankCardId,
            String disburseBankCardNo,
            LocalDateTime disburseTime,
            LocalDateTime disburseEndTime,
            String reason
    ) {
        List<DisburseOrderStatementEntity> list = disburseOrderStatementMapper.findByInfo(
                orderNo,
                amount,
                bankCode,
                cardNo,
                operatorId,
                status,
                proof,
                proofInfo,
                disburseBankCardId,
                disburseBankCardNo,
                disburseTime,
                disburseEndTime,
                reason
        );
        return list;
    }

    public DisburseOrderStatementEntity findOneByInfo(
            String orderNo,
            Integer amount,
            String bankCode,
            String cardNo,
            String operatorId,
            String status,
            String proof,
            String proofInfo,
            String disburseBankCardId,
            String disburseBankCardNo,
            LocalDateTime disburseTime,
            LocalDateTime disburseEndTime,
            String reason
    ) {
        DisburseOrderStatementEntity one = disburseOrderStatementMapper.findOneByInfo(
                orderNo,
                amount,
                bankCode,
                cardNo,
                operatorId,
                status,
                proof,
                proofInfo,
                disburseBankCardId,
                disburseBankCardNo,
                disburseTime,
                disburseEndTime,
                reason
        );
        return one;
    }


    // TODO: mapper 通用模板
    // TODO: mapper 通用模板
    // TODO: mapper 通用模板
    @Update(" update tb_disburse_order_statement set" +
            " order_no = #{orderNo}, amount = #{amount}, bank_code = #{bankCode}, card_no = #{cardNo}," +
            " operator_id = #{operatorId}, status = #{status}, proof = #{proof}, proof_info = #{proofInfo}," +
            " disburse_bank_card_id = #{disburseBankCardId}, disburse_bank_card_no = #{disburseBankCardNo}, disburse_time = #{disburseTime}," +
            " disburse_end_time = #{disburseEndTime}, reason = #{reason}, update_time = now()" +
            " where id = #{id}")
    int updateByInfo(@Param("id") String id,
                     @Param("orderNo") String orderNo,
                     @Param("amount") Integer amount,
                     @Param("bankCode") String bankCode,
                     @Param("cardNo") String cardNo,
                     @Param("operatorId") String operatorId,
                     @Param("status") String status,
                     @Param("proof") String proof,
                     @Param("proofInfo") String proofInfo,
                     @Param("disburseBankCardId") String disburseBankCardId,
                     @Param("disburseBankCardNo") String disburseBankCardNo,
                     @Param("disburseTime") LocalDateTime disburseTime,
                     @Param("disburseEndTime") LocalDateTime disburseEndTime,
                     @Param("reason") String reason);

    @Select("SELECT a.* FROM tb_disburse_order_statement a" +
            " WHERE a.order_no = #{orderNo}" +
            " AND a.amount = #{amount}" +
            " AND a.bank_code = #{bankCode}" +
            " AND a.card_no = #{cardNo}" +
            " AND a.operator_id = #{operatorId}" +
            " AND a.status = #{status}" +
            " AND a.proof = #{proof}" +
            " AND a.proof_info = #{proofInfo}" +
            " AND a.disburse_bank_card_id = #{disburseBankCardId}" +
            " AND a.disburse_bank_card_no = #{disburseBankCardNo}" +
            " AND a.disburse_time = #{disburseTime}" +
            " AND a.disburse_end_time = #{disburseEndTime}" +
            " AND a.reason = #{reason}" +
            " order by a.id desc LIMIT 10000")
    List<DisburseOrderStatementEntity> findByInfo(@Param("orderNo") String orderNo,
                                                  @Param("amount") Integer amount,
                                                  @Param("bankCode") String bankCode,
                                                  @Param("cardNo") String cardNo,
                                                  @Param("operatorId") String operatorId,
                                                  @Param("status") String status,
                                                  @Param("proof") String proof,
                                                  @Param("proofInfo") String proofInfo,
                                                  @Param("disburseBankCardId") String disburseBankCardId,
                                                  @Param("disburseBankCardNo") String disburseBankCardNo,
                                                  @Param("disburseTime") LocalDateTime disburseTime,
                                                  @Param("disburseEndTime") LocalDateTime disburseEndTime,
                                                  @Param("reason") String reason);

    @Select("SELECT a.* FROM tb_disburse_order_statement a" +
            " WHERE a.order_no = #{orderNo}" +
            " AND a.amount = #{amount}" +
            " AND a.bank_code = #{bankCode}" +
            " AND a.card_no = #{cardNo}" +
            " AND a.operator_id = #{operatorId}" +
            " AND a.status = #{status}" +
            " AND a.proof = #{proof}" +
            " AND a.proof_info = #{proofInfo}" +
            " AND a.disburse_bank_card_id = #{disburseBankCardId}" +
            " AND a.disburse_bank_card_no = #{disburseBankCardNo}" +
            " AND a.disburse_time = #{disburseTime}" +
            " AND a.disburse_end_time = #{disburseEndTime}" +
            " AND a.reason = #{reason}" +
            " order by a.id desc LIMIT 1")
    DisburseOrderStatementEntity findOneByInfo(@Param("orderNo") String orderNo,
                                               @Param("amount") Integer amount,
                                               @Param("bankCode") String bankCode,
                                               @Param("cardNo") String cardNo,
                                               @Param("operatorId") String operatorId,
                                               @Param("status") String status,
                                               @Param("proof") String proof,
                                               @Param("proofInfo") String proofInfo,
                                               @Param("disburseBankCardId") String disburseBankCardId,
                                               @Param("disburseBankCardNo") String disburseBankCardNo,
                                               @Param("disburseTime") LocalDateTime disburseTime,
                                               @Param("disburseEndTime") LocalDateTime disburseEndTime,
                                               @Param("reason") String reason);
