{
    "id": "id",
    "loginName": "loginName",
    "fullName": "fullName",
    "password": "password",
    "type": "type",
    "status": "status",
    "failedLoginCount": "failedLoginCount",
    "lastTime": "lastTime",
    "createTime": "createTime",
    "updateTime": "updateTime"
}


@RequestParam(name = "id", required = false) String id,
@RequestParam(name = "loginName", required = false) String loginName,
@RequestParam(name = "fullName", required = false) String fullName,
@RequestParam(name = "password", required = false) String password,
@RequestParam(name = "type", required = false) String type,
@RequestParam(name = "status", required = false) String status,
@RequestParam(name = "failedLoginCount", required = false) Integer failedLoginCount,
@RequestParam(name = "lastTime", required = false) LocalDateTime lastTime,
@RequestParam(name = "createTime", required = false) LocalDateTime createTime,
@RequestParam(name = "updateTime", required = false) LocalDateTime updateTime


{
    title: 'id',
    key: 'id',
},{
    title: '用户登录code',
    key: 'loginName',
},{
    title: '用户登录全名',
    key: 'fullName',
},{
    title: '密码',
    key: 'password',
},{
    title: '类型',
    key: 'type',
},{
    title: '状态',
    key: 'status',
},{
    title: '登录失败的次数',
    key: 'failedLoginCount',
},{
    title: '最后一次的登录失败,或者成功的时间',
    key: 'lastTime',
},{
    title: '产生时间',
    key: 'createTime',
},{
    title: '更新时间',
    key: 'updateTime',
}


{
    title: 'id',
    width: 100,
    key: 'id',
},{
    title: '用户登录code',
    width: 100,
    key: 'loginName',
},{
    title: '用户登录全名',
    width: 100,
    key: 'fullName',
},{
    title: '密码',
    width: 100,
    key: 'password',
},{
    title: '类型',
    width: 100,
    key: 'type',
},{
    title: '状态',
    width: 100,
    key: 'status',
},{
    title: '登录失败的次数',
    width: 100,
    key: 'failedLoginCount',
},{
    title: '最后一次的登录失败,或者成功的时间',
    width: 100,
    key: 'lastTime',
},{
    title: '产生时间',
    width: 100,
    key: 'createTime',
},{
    title: '更新时间',
    width: 100,
    key: 'updateTime',
}


id
用户登录code
用户登录全名
密码
类型
状态
登录失败的次数
最后一次的登录失败,或者成功的时间
产生时间
更新时间


id
login_name
full_name
password
type
status
failed_login_count
last_time
create_time
update_time


id
loginName
fullName
password
type
status
failedLoginCount
lastTime
createTime
updateTime

tableName : t_system_user

a.id, a.login_name, a.full_name, a.password, a.type, a.status, a.failed_login_count, a.last_time, a.create_time, a.update_time,


a.id,
a.login_name,
a.full_name,
a.password,
a.type,
a.status,
a.failed_login_count,
a.last_time,
a.create_time,
a.update_time,


// api/api.js 中, 需要生成的代码

  systemUserFind(query) {
    return this.get('/systemUser/find', query)
  }

  systemUserFindAll(query) {
    return this.getFindAll('/systemUser/find', query)
  }

  systemUserAll() {
    return this.getAll('/systemUser/find')
  }

  systemUserOne(id) {
    return this.getOne('/systemUser/find', id)
  }

  systemUserAddUpdate(obj, by) {
    return this.postBy('/systemUser/addUpdate', obj, by)
  }

  systemUserDelete(obj) {
    return this.post('/systemUser/delete', obj)
  }


// router/index.js 中, 需要生成的代码

  {
    path: '/-frontFilePath-/systemUser',
    component: () => import('@/views/-frontFilePath-/systemUser'),
  },


      // 前端代码中详情数据的展示
      <el-descriptions border :column="2">
        <!--<el-descriptions-item label="id">{{ temp.id }}</el-descriptions-item>-->
        <el-descriptions-item label="用户登录code">{{ temp.loginName }}</el-descriptions-item>
        <el-descriptions-item label="用户登录全名">{{ temp.fullName }}</el-descriptions-item>
        <el-descriptions-item label="密码">{{ temp.password }}</el-descriptions-item>
        <el-descriptions-item label="类型">{{ temp.type }}</el-descriptions-item>
        <el-descriptions-item label="状态">{{ temp.status }}</el-descriptions-item>
        <el-descriptions-item label="登录失败的次数">{{ temp.failedLoginCount }}</el-descriptions-item>
        <el-descriptions-item label="最后一次的登录失败,或者成功的时间">{{ temp.lastTime }}</el-descriptions-item>
        <!--<el-descriptions-item label="产生时间">{{ temp.createTime }}</el-descriptions-item>-->
        <!--<el-descriptions-item label="更新时间">{{ temp.updateTime }}</el-descriptions-item>-->
      </el-descriptions>

      <el-form label-position="left" inline class="demo-table-expand">
        <!--<el-form-item label="id"><span>{{temp.id}}</span></el-form-item>-->
        <el-form-item label="用户登录code"><span>{{temp.loginName}}</span></el-form-item>
        <el-form-item label="用户登录全名"><span>{{temp.fullName}}</span></el-form-item>
        <el-form-item label="密码"><span>{{temp.password}}</span></el-form-item>
        <el-form-item label="类型"><span>{{temp.type}}</span></el-form-item>
        <el-form-item label="状态"><span>{{temp.status}}</span></el-form-item>
        <el-form-item label="登录失败的次数"><span>{{temp.failedLoginCount}}</span></el-form-item>
        <el-form-item label="最后一次的登录失败,或者成功的时间"><span>{{temp.lastTime}}</span></el-form-item>
        <!--<el-form-item label="产生时间"><span>{{temp.createTime}}</span></el-form-item>-->
        <!--<el-form-item label="更新时间"><span>{{temp.updateTime}}</span></el-form-item>-->
      </el-form>



'用户登录code', '用户登录全名', '密码', '类型', '状态', '登录失败的次数', '最后一次的登录失败,或者成功的时间'

'loginName', 'fullName', 'password', 'type', 'status', 'failedLoginCount', 'lastTime'

| page                | 否 | 整数     | 页码,第几页,编号从 1 开始, 默认第1页
| size                | 否 | 整数     | 每页多少条数据,默认值:1 , 最大1000
| limit               | 否 | 整数     | 每页多少条数据,默认值:1 , 最大1000,与size 一样
| id                  | 否 | 字符串   | id,例如: 1234
| ids                 | 否 | 字符串   | 多个id以逗号分隔,例如: 1234,2345
| startTime           | 否 | 日期时间 | 开始时间,例如 : 2017-01-01 12:13:14 </br> 或者 例如 : 2017-01-01
| endTime             | 否 | 日期时间 | 结束时间,例如 : 2023-01-02 12:13:14 </br> 或者 例如 : 2023-01-02
| all                 | 否 | 字符串   | 分页状态下,查询出全部数据,相当于page=1,size=2000
| _all                | 否 | 字符串   | 查询全部的原始数据,小心使用,相当于page=1,size=20000,_raw=_raw
| _one                | 否 | 字符串   | 查询出一条数据,相当于page=1,size=1,返回对象,不是数组
| _raw                | 否 | 字符串   | 原始数据查询,查询原始表数据,不附带其他,数据结构与表对应起来
| createTimeFrom      | 否 | 日期时间 | 产生时间的开始时间,例如 : 2023-01-02 12:13:14 </br> 或者 例如 : 2023-01-02
| createTimeTo        | 否 | 日期时间 | 产生时间的结束时间,例如 : 2023-01-02 12:13:14 </br> 或者 例如 : 2023-01-02
| updateTimeFrom      | 否 | 日期时间 | 更新时间的开始时间,例如 : 2023-01-02 12:13:14 </br> 或者 例如 : 2023-01-02
| updateTimeTo        | 否 | 日期时间 | 更新时间的结束时间,例如 : 2023-01-02 12:13:14 </br> 或者 例如 : 2023-01-02

| id                  | 是 | 字符串   | id</br>***最大长度:32***
| loginName           | 是 | 字符串   | 用户登录code</br>***最大长度:64***
| fullName            | 是 | 字符串   | 用户登录全名</br>***最大长度:64***
| password            | 是 | 字符串   | 密码</br>***最大长度:256***
| type                | 是 | 字符串   | 类型</br>***最大长度:16***
| status              | 是 | 字符串   | 状态</br>***最大长度:16***
| failedLoginCount    | 是 | 整数     | 登录失败的次数</br>***整数最大长度:5***</br>***小数最大长度:0***
| lastTime            | 是 | 日期时间 | 最后一次的登录失败,或者成功的时间</br>格式 : yyyy-MM-dd HH:mm:ss </br> 例如 : 2013-05-09 12:13:14
| createTime          | 是 | 日期时间 | 产生时间</br>格式 : yyyy-MM-dd HH:mm:ss </br> 例如 : 2013-05-09 12:13:14
| updateTime          | 是 | 日期时间 | 更新时间</br>格式 : yyyy-MM-dd HH:mm:ss </br> 例如 : 2013-05-09 12:13:14


    // TODO: controller 通用模板
    // TODO: controller 通用模板
    // TODO: controller 通用模板
    @GetMapping("info")
    public ReturnData info(
            @RequestParam(name = "loginName", required = false) String loginName,
            @RequestParam(name = "fullName", required = false) String fullName,
            @RequestParam(name = "password", required = false) String password,
            @RequestParam(name = "type", required = false) String type,
            @RequestParam(name = "status", required = false) String status,
            @RequestParam(name = "failedLoginCount", required = false) Integer failedLoginCount,
            @RequestParam(name = "lastTime", required = false) LocalDateTime lastTime
    ) throws Exception {
        List<SystemUserEntity> list = systemUserService.findByInfo(
                loginName,
                fullName,
                password,
                type,
                status,
                failedLoginCount,
                lastTime
        );
        return ok(list);
    }

    @GetMapping("infoOne")
    public ReturnData infoOne(
            @RequestParam(name = "loginName", required = false) String loginName,
            @RequestParam(name = "fullName", required = false) String fullName,
            @RequestParam(name = "password", required = false) String password,
            @RequestParam(name = "type", required = false) String type,
            @RequestParam(name = "status", required = false) String status,
            @RequestParam(name = "failedLoginCount", required = false) Integer failedLoginCount,
            @RequestParam(name = "lastTime", required = false) LocalDateTime lastTime
    ) throws Exception {
        SystemUserEntity one = systemUserService.findOneByInfo(
                loginName,
                fullName,
                password,
                type,
                status,
                failedLoginCount,
                lastTime
        );
        return ok(one);
    }


    // TODO: service 通用模板
    // TODO: service 通用模板
    // TODO: service 通用模板
    public int updateByInfo(
            String id,
            String loginName,
            String fullName,
            String password,
            String type,
            String status,
            Integer failedLoginCount,
            LocalDateTime lastTime
    ) {
        return systemUserMapper.updateByInfo(
                id,
                loginName,
                fullName,
                password,
                type,
                status,
                failedLoginCount,
                lastTime
        );
    }

    public List<SystemUserEntity> findByInfo(
            String loginName,
            String fullName,
            String password,
            String type,
            String status,
            Integer failedLoginCount,
            LocalDateTime lastTime
    ) {
        List<SystemUserEntity> list = systemUserMapper.findByInfo(
                loginName,
                fullName,
                password,
                type,
                status,
                failedLoginCount,
                lastTime
        );
        return list;
    }

    public SystemUserEntity findOneByInfo(
            String loginName,
            String fullName,
            String password,
            String type,
            String status,
            Integer failedLoginCount,
            LocalDateTime lastTime
    ) {
        SystemUserEntity one = systemUserMapper.findOneByInfo(
                loginName,
                fullName,
                password,
                type,
                status,
                failedLoginCount,
                lastTime
        );
        return one;
    }


    // TODO: mapper 通用模板
    // TODO: mapper 通用模板
    // TODO: mapper 通用模板
    @Update(" update t_system_user set" +
            " login_name = #{loginName}, full_name = #{fullName}, password = #{password}, type = #{type}," +
            " status = #{status}, failed_login_count = #{failedLoginCount}, last_time = #{lastTime}, update_time = now()" +
            " where id = #{id}")
    int updateByInfo(@Param("id") String id,
                     @Param("loginName") String loginName,
                     @Param("fullName") String fullName,
                     @Param("password") String password,
                     @Param("type") String type,
                     @Param("status") String status,
                     @Param("failedLoginCount") Integer failedLoginCount,
                     @Param("lastTime") LocalDateTime lastTime);

    @Select("SELECT a.* FROM t_system_user a" +
            " WHERE a.login_name = #{loginName}" +
            " AND a.full_name = #{fullName}" +
            " AND a.password = #{password}" +
            " AND a.type = #{type}" +
            " AND a.status = #{status}" +
            " AND a.failed_login_count = #{failedLoginCount}" +
            " AND a.last_time = #{lastTime}" +
            " order by a.id desc LIMIT 10000")
    List<SystemUserEntity> findByInfo(@Param("loginName") String loginName,
                                      @Param("fullName") String fullName,
                                      @Param("password") String password,
                                      @Param("type") String type,
                                      @Param("status") String status,
                                      @Param("failedLoginCount") Integer failedLoginCount,
                                      @Param("lastTime") LocalDateTime lastTime);

    @Select("SELECT a.* FROM t_system_user a" +
            " WHERE a.login_name = #{loginName}" +
            " AND a.full_name = #{fullName}" +
            " AND a.password = #{password}" +
            " AND a.type = #{type}" +
            " AND a.status = #{status}" +
            " AND a.failed_login_count = #{failedLoginCount}" +
            " AND a.last_time = #{lastTime}" +
            " order by a.id desc LIMIT 1")
    SystemUserEntity findOneByInfo(@Param("loginName") String loginName,
                                   @Param("fullName") String fullName,
                                   @Param("password") String password,
                                   @Param("type") String type,
                                   @Param("status") String status,
                                   @Param("failedLoginCount") Integer failedLoginCount,
                                   @Param("lastTime") LocalDateTime lastTime);
