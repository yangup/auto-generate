package -packagePackage-;

import com.baomidou.mybatisplus.core.conditions.query.LambdaQueryWrapper;
import com.baomidou.mybatisplus.extension.plugins.pagination.Page;
import com.pay.common.common.BaseService;
import com.pay.common.common.QueryMap;
import com.pay.common.common.ReturnData;
import com.pay.common.common.paginator.PageBounds;
import com.pay.common.paginator.PageList;
import com.pay.common.util.RedissonUtil;
import lombok.extern.slf4j.Slf4j;
import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import static org.springframework.beans.BeanUtils.*;
import static com.pay.common.common.ReturnData.*;
import static org.apache.commons.lang3.StringUtils.*;

import java.util.List;
import java.util.Set;
import java.util.stream.Collectors;

/**
 * -tableComment-
 * -tableNameJava-
 *
 * @author -author-
 */
@Slf4j
@Service
public class -tableNameJava-Service extends BaseService {

    private @Autowired -tableNameJava-Mapper -tableNameJavaParam-Mapper;
    private @Autowired RedissonUtil redissonUtil;

    -autowiredService-
    @Transactional
    public String createEntity(-tableNameJava-Entity entity) {
        entity.id = redissonUtil.generateId(-tableNameJava-Entity.class, "-tableNameSimpleUpperCase-");
        -tableNameJavaParam-Mapper.insert(entity);
        return entity.id;
    }

    @Transactional
    public int deleteById(String id) {
        return -tableNameJavaParam-Mapper.deleteById(id);
    }

    @Transactional
    public int updateEntity(-tableNameJava-Entity entity) {
        return -tableNameJavaParam-Mapper.updateById(entity);
    }

    // TODO: 以下为查询
    public -tableNameJava-Data findOne(QueryMap queryMap) {
        return find(queryMap, null).first();
    }

    public PageList<-tableNameJava-Data> find(QueryMap queryMap) {
        return find(queryMap, null);
    }

    public PageList<-tableNameJava-Data> find(QueryMap queryMap, PageBounds pageBounds) {
        queryMap = QueryMap.of(queryMap);
        pageBounds = pageBounds == null ? PageBounds.of() : pageBounds;
        LambdaQueryWrapper<-tableNameJava-Entity> wrapper = new LambdaQueryWrapper<>();
        wrapper.eq(isNotEmpty(queryMap.get("id")), -tableNameJava-Entity::getId, queryMap.get("id"));
        wrapper.in(isNotEmpty(queryMap.get("id")), -tableNameJava-Entity::getId, queryMap.get("ids"));
        -serviceFindMethod-
        wrapper.orderByDesc(-tableNameJava-Entity::getId);
        PageList<-tableNameJava-Data> page = null;
        if (pageBounds.isNotPageFind()) {
            List<-tableNameJava-Data> dataList = -tableNameJavaParam-Mapper.selectList(wrapper).stream()
                    .map(this::convertToData)
                    .collect(Collectors.toList());
            page = new PageList<>(dataList);
        } else {
            Page<-tableNameJava-Entity> pageData = -tableNameJavaParam-Mapper.selectPage(
                    Page.of(pageBounds.getPage(), pageBounds.getSize()), wrapper);
            List<-tableNameJava-Data> dataList = pageData.getRecords().stream()
                    .map(this::convertToData)
                    .collect(Collectors.toList());
            page = new PageList<>(dataList, pageData.getTotal());
        }
        if (isEmpty(page) || queryMap.raw()) {
            return page;
        }
        -serviceFindMethodMore-
        return page;
    }

    private -tableNameJava-Data convertToData(-tableNameJava-Entity entity) {
        -tableNameJava-Data data = new -tableNameJava-Data();
        copyProperties(entity, data);
        return data;
    }

    // TODO: ReturnData - findQuery
    public ReturnData<Object> findQuery(QueryMap queryMap, PageBounds pageBounds) {
        queryMap = QueryMap.of(queryMap);
        if (queryMap.all()) {
            return ReturnData.ok(this.find(QueryMap.of().rawTrue()));
        }
        if (queryMap.justOne()) {
            return ReturnData.ok(this.findOne(queryMap));
        }
        return ReturnData.ok(this.find(queryMap, PageBounds.of(pageBounds, queryMap)));
    }

}
